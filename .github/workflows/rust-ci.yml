name: CI

on:
  push:
    branches: [ main, develop ]
    paths: 
      - 'DiskANNInRust/**'
      - '.github/workflows/rust-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'DiskANNInRust/**'
      - '.github/workflows/rust-ci.yml'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, nightly]
        include:
          - os: ubuntu-latest
            rust: "1.80"  # Minimum supported Rust version
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: clippy, rustfmt
        
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: "DiskANNInRust -> target"
        
    - name: Check formatting
      if: matrix.rust == 'stable' && matrix.os == 'ubuntu-latest'
      run: |
        cd DiskANNInRust
        cargo fmt --all -- --check
        
    - name: Run clippy
      run: |
        cd DiskANNInRust
        cargo clippy --all-targets --all-features -- -D warnings
        
    - name: Build
      run: |
        cd DiskANNInRust
        cargo build --verbose --all-features
        
    - name: Run tests
      run: |
        cd DiskANNInRust
        cargo test --verbose --all-features
        
    - name: Test without default features
      run: |
        cd DiskANNInRust
        cargo test --verbose --no-default-features
        
    - name: Test individual features
      run: |
        cd DiskANNInRust
        cargo test --verbose --features simd
        cargo test --verbose --features unsafe_opt
        cargo test --verbose --features wasm

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: "DiskANNInRust -> target"
        
    - name: Install cargo-audit
      run: cargo install --force cargo-audit
      
    - name: Install cargo-deny
      run: cargo install --force cargo-deny
      
    - name: Run audit
      run: |
        cd DiskANNInRust
        cargo audit
        
    - name: Run deny
      run: |
        cd DiskANNInRust
        cargo deny check

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: "DiskANNInRust -> target"
        
    - name: Install cargo-tarpaulin
      run: cargo install --force cargo-tarpaulin
      
    - name: Run coverage
      run: |
        cd DiskANNInRust
        cargo tarpaulin --verbose --all-features --workspace --timeout 120 --out xml
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./DiskANNInRust/cobertura.xml
        fail_ci_if_error: false
        
  benchmarks:
    name: Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: "DiskANNInRust -> target"
        
    - name: Run benchmarks
      run: |
        cd DiskANNInRust
        cargo bench --verbose